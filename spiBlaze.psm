counter_low 	equ		s0;
counter_mid	equ		s1;
counter_high 	equ		s2;

var_out		equ		s3;

shift_out	equ		s4;
shift_counter	equ		s5;

input		equ		s6;

data_in_high	equ		s7;
data_in_low	equ		s8;


ioPort		equ		0x00;

busy_mask	equ		0x10;
miso_masl	equ		0x20;

cs_true		equ		0x01;
Nclk_Ndin	equ		0x00;
Nclk_din	equ		0x04;
clk_Ndin	equ		0x02;
clk_din		equ		0x06;


readX		equ		0x93;
readY		equ		0xd3;

	load	var_out,	cs_true;	begin situation
	out	var_out,	ioPort;		Set csN high

	load	shift_out,	readX;		set to do an X read
read:
	load 	shift_counter,	0xf8; 		Counter to count 8 bits
	load	var_out,	Nclk_Ndin;
	out	var_out,	ioPort;		Set dclk low and din MOSI low
shift:
	sl0	shift_out;			shift MOSI register	
	call 	C,		setMOSI;
	call 	NC,		clrMOSI;
	add	shift_counter,	0x01;
	jump	NC,		shift;
	load	var_out,	Nclk_Ndin;
	out	var_out,	ioPort;	set dclk low
busy:	
	load 	var_out,	clk_Ndin;		
	out	var_out,	ioPort;	set dclk high
	call 	delay;
	load 	var_out,	Nclk_Ndin;		
	out	var_out,	ioPort;	set dclk low
	call 	delay;
	in	input,		ioPort;
	test	input,		busy_mask;
	jump	Z,		busy;
	load 	shift_counter,	0xf4; 
data_in:
	load	var_out,	0x01;
	out	var_out,	ioPort;		Set dclk high
	call 	delay;	
	in	input,	miso_port;
	or	data_in_low,	input;		shift data through registers
	sl0	data_in_low;
	sla	data_in_high;
	load	var_out,	0x00;
	out	var_out,	ioPort;		Set dclk low
	call 	delay;
	add	shift_counter,	0x01;
	jump	NC,		data_in;	
	

	load 	var_out,	0x01;		
	out	var_out,	ioPort;	set dclk high
	call 	delay;
	
delay:
	load	counter_low,	0x00;
	load	counter_mid,	0x00;
	load	counter_high,	0x00;
delay_inner:
	add 	counter_low,	0xff;		SHOULD be 0x01 @ 125MHz
	jump 	NC,		delay_inner;
	add	counter_mid,	0x41;		SHOULD be 0x01 @ 125MHz
	jump 	NC,		delay_inner;
	add	counter_high,	0x01;
	test	counter_high,	0x02; 
	jump 	NC,		delay_inner;
	ret;

setMOSI:
	load 	var_out,	Nclk_din;		
	out	var_out,	ioPort;
	call 	delay;
	load 	var_out,	clk_din;		
	out	var_out,	ioPort;
	call 	delay;
	ret;
	
clrMOSI:
	load 	var_out,	Nclk_Ndin;		
	out	var_out,	ioPort;
	call 	delay;
	load 	var_out,	clk_Ndin;		
	out	var_out,	ioPort;
	call 	delay;
	ret;
	
	
end:
